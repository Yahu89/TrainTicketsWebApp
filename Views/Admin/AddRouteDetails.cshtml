@using TrainTicketsWebApp.Models.Dto
@model RouteDetailsCreationView

<h2>Konfiguracja trasy:</h2>
<br />

<form id="form" class="row" data-url="@Url.Action("CreateRouteDetails")">
	Nazwa trasy:
	<div class="container">
		<div class="row">
			<div class="col-md-3">
				<select id="routeId" class="form-select border-0 shadow mb-4" asp-items="@Model.Routes"></select>
			</div>
			<div class="col-md-3">
				<input id="addSegment" type="button" class="btn btn-info form-control mb-2" value="Dodaj segment"></input>
			</div>			
		</div>		
	</div>
	
	<table id="table" class="table table-bordered table-striped" style="width: 100%">
		<thead>
			<tr>
				<th>
					Skąd
				</th>
				<th>
					Dokąd
				</th>
				<th>
					Dystans
				</th>
				<th>
					Prędkość [km/h]
				</th>
				<th>
					Usuń segment
				</th>
			</tr>
		</thead>

		<tbody id="parentTable">

			<tr name="item">
				<td>
					@Html.DropDownList("From", Model.From, new { @class = "form-select border-0 shadow mb-2", toggle = "item-property" })
				</td>
				<td>
					@Html.DropDownList("To", Model.To, new { @class = "form-select border-0 shadow mb-2", toggle = "item-property" })
				</td>
				<td>
					<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
					<h7 toggle="item-dist" id="warn" class="text-danger"></h7>
				</td>
				<td>
					<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
					<h7 toggle="item-speed" id="warn" class="text-danger"></h7>
				</td>
				<td>

				</td>
			</tr>

		</tbody>

	</table>

	<div class="container">
		<div class="row">
			<div class="col-md-6">
				<button id="submitButton" type="submit" class="btn btn-success form-control mb-2">Dodaj</button>
			</div>
			<div class="col-6">
				<a class="btn btn-secondary" asp-controller="Admin" asp-action="Index">Wróć do listy</a>
			</div>
		</div>
	</div>
</form>

@section Scripts
{
	<script>
		$(document).ready(function () {
			const addRecord = () => {
				let row = `
										<tr name="item">
										<td>
				@Html.DropDownList("From", Model.From, new { @class = "form-select border-0 shadow mb-2", @toggle = "item-property" })
										</td>
										<td>
				@Html.DropDownList("To", Model.To, new { @class = "form-select border-0 shadow mb-2", @toggle = "item-property" })
										</td>
										<td>
											<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
													<h7 toggle="item-dist" id="warn" class="text-danger"></h7>
										</td>
										<td>
											<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
													<h7 toggle="item-speed" id="warn" class="text-danger"></h7>
										</td>
										<td>
											<input type="button" class="btn btn-danger" value="Usuń" onclick="removeRecord(this)"/>
										</td>
										</tr>
											`;

				$('#table tr:last').after(row);
			}

			$('#addSegment').click(() => {
				addRecord();
			});

			$('#submitButton').click((e) => {
				e.preventDefault();
				onSubmit();
			});
		});

		const onSubmit = () => {

			$('h7[id="warn"]').text('');
			let isCorrectData = true;
			let form = {};

			const items = $('tr[name="item"]');
			

			const elements = [];
			let itemArray = [];

			$.each(items, function () {

				const properties = $(this).find('[toggle="item-property"]');
				const item = {};
				let i = 0;

				$.each(properties, function (index, element) {
					if (i === 0) {
						item.From = $(element).val();
						itemArray.push(item.From);
					}

					if (i === 1) {
						item.To = $(element).val();
						itemArray.push(item.To);
					}

					if (i === 2) {
						item.distance = $(element).val();
						itemArray.push(item.distance);

						let c = parseInt(item.distance);

						if (isNaN(c) || c <= 0) {
							isCorrectData = false;
							$(this).next().text('Nieprawidłowa wartość');
						}
					}

					if (i === 3) {
						item.maxSpeed = $(element).val();
						itemArray.push(item.maxSpeed);

						let d = parseInt(item.maxSpeed);

						if (isNaN(d) || d <= 0) {
							isCorrectData = false;
							$(this).next().text('Nieprawidłowa wartość');
						}
					}

					item.routeId = $('#routeId').val();
					itemArray.push(item.routeId);

					i++;
				});

				elements.push(item);
				form = elements;
			});

			let CreateRouteDetails = form;
			console.log(CreateRouteDetails);

			const data = $('#form');

			if (isCorrectData) {
				$.ajax({
					url: data.data('url'),
					method: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(form),

					success: function (response) {
						window.location.href = response.redirectToUrl;
					},
					error: function (error) {

					}
				});
			}		
		}

		function removeRecord(tr) {

			document.getElementById("parentTable").removeChild(tr.parentNode.parentNode);
		}

	</script>
}